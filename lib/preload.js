const xhrProxy = require('./xhr_proxy.js');const {ipcRenderer, contextBridge} = require('electron');const axios = require('axios')const moment = require("moment");const ajaxService = axios.create({    // withCredentials: true,    headers: {        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',    }});ajaxService.interceptors.request.use((config) => {    config.headers.Accept = '*/*'    config.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'    return config;}, (error) => {    return error;});let webreportserviceInfo = nulllet append = nullconst updateIframeSrc = (name, taskid) => {    const url = $("#bbhlist-iframe")[0].src.split('?')[0];    const params = $("#bbhlist-iframe")[0].src.split('?')[1];    let oldParams = {}    params.split('&').forEach((item) => {        const searchItem = item.split('=')        oldParams[searchItem[0]] = searchItem[1]    })    oldParams['action'] = 'qbe'    oldParams['name'] = name    oldParams['includehzh'] = 'false'    oldParams['newbbhlist'] = 'true'    oldParams['taskid'] = taskid    $("#bbhlist-iframe")[0].src = url + '?' + Object.keys(oldParams).map(item => item + '=' + oldParams[item]).join('&')}const saveData = (postData) => {    const locationSearch = window.location.search.replace('?', '')    const search = {};    locationSearch.split('&').forEach(item => {        const dataItem = item.split('=')        search[dataItem[0]] = dataItem[1]    })    const submitData = {        'service': 'edituserdata',        'taskid': search.taskid,        'btype': webreportserviceInfo.btype,        'bbq': search.bbq,        'ds': search.dataset,        'upid': search.bbhid,        'curbbh': search.bbhid,        'curbtype': webreportserviceInfo.curbbhtype,        '__t__': moment().format('x'),        'rpt': 'XXB',        'bbh': webreportserviceInfo.userid,        'customparams': '',    }    // 发送 POST 请求    ajaxService({        method: 'post',        url: '/webPage/ei/webreportservice.do',        // withCredentials: true,        transformRequest: transFun,        headers: {            // 设置提交数据格式            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'        },        data: {            ...submitData,            'data': postData ? JSON.stringify([postData]) : null,        }    }).then((res) => {        ajaxService({            method: 'post',            url: '/webPage/ei/webreportservice.do',            // withCredentials: true,            transformRequest: transFun,            headers: {                // 设置提交数据格式                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'            },            data: {                ...submitData,                'save': true,                'silent': true,            }        }).then((res)=>{            updateIframeSrc(postData.I1, search.taskid)        })    });}ipcRenderer.on('requestData', (event, args) => {    webreportserviceInfo = args})ipcRenderer.on('append', (event, args) => {    // updateIframeSrc(args.username, args.taskid)    // window.XWindow.prototype._adjustBackgroundIframe()})const transFun = (data = {}) => Object.entries(data).map(ent => ent.join("=")).join("&")ipcRenderer.on('post', (event, args) => {    saveData(args)})try {    contextBridge.exposeInMainWorld('electronAPI', {        LoadData: (data) => ipcRenderer.invoke('LoadData', data)    })} catch (e) {}console.log('注入preloadJS了')
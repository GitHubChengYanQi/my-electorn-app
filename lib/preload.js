const xhrProxy = require('./xhr_proxy.js');const {ipcRenderer, contextBridge} = require('electron');const axios = require('axios')const moment = require("moment");const ajaxService = axios.create({    // withCredentials: true,    headers: {        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',    }});ajaxService.interceptors.request.use((config) => {    config.headers.Accept = '*/*'    config.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'    return config;}, (error) => {    return error;});let webreportserviceInfo = nullipcRenderer.on('requestData', (event, args) => {    webreportserviceInfo = args})const transFun = (data = {}) => Object.entries(data).map(ent => ent.join("=")).join("&")ipcRenderer.on('post', (event, args) => {    // console.log('setData==>', args)    // console.log('webreportserviceInfo==>', webreportserviceInfo)    const locationSearch = window.location.search.replace('?', '')    const search = {};    locationSearch.split('&').forEach(item => {        const dataItem = item.split('=')        search[dataItem[0]] = dataItem[1]    })    // console.log(webreportserviceInfo)    const formData = new FormData()    formData.append('service', 'edituserdata')    formData.append('taskid', search.taskid)    formData.append('btype', webreportserviceInfo.btype)    formData.append('bbq', search.bbq)    formData.append('ds', search.dataset)    formData.append('upid', search.bbhid)    formData.append('curbbh', search.bbhid)    formData.append('curbtype', webreportserviceInfo.curbbhtype)    formData.append('__t__', moment().format('x'))    formData.append('rpt', 'XXB')    formData.append('data', args)    formData.append('bbh', webreportserviceInfo.userid)    formData.append('customparams', '')    const submitData = {        'service': 'edituserdata',        'taskid': search.taskid,        'btype': webreportserviceInfo.btype,        'bbq': search.bbq,        'ds': search.dataset,        'upid': search.bbhid,        'curbbh': search.bbhid,        'curbtype': webreportserviceInfo.curbbhtype,        '__t__': moment().format('x'),        'rpt': 'XXB',        'data': args,        'bbh': webreportserviceInfo.userid,        'customparams': '',    }    // 发送 POST 请求    ajaxService({        method: 'post',        url: '/webPage/ei/webreportservice.do',        // withCredentials: true,        transformRequest: transFun,        headers: {            // 设置提交数据格式            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'        },        data: submitData    }).then(() => {        const url = $("#bbhlist-iframe")[0].src.split('?')[0];        const params = $("#bbhlist-iframe")[0].src.split('?')[1];        let oldParams = {}        params.split('&').forEach((item) => {            const searchItem = item.split('=')            oldParams[searchItem[0]] = searchItem[1]        })        oldParams['action'] = 'qbe'        oldParams['name'] = '003'        oldParams['includehzh'] = 'false'        oldParams['newbbhlist'] = 'true'        console.log(oldParams)        $("#bbhlist-iframe")[0].src = url + '?' + Object.keys(oldParams).map(item => item + '=' + oldParams[item]).join('&')    });    // 获取数据之后保存数据    // https://zb.lnwsjktj.com:8080/webPage/ei/webreportservice.do})try {    contextBridge.exposeInMainWorld('electronAPI', {        LoadData: (data) => ipcRenderer.invoke('LoadData', data)    })} catch (e) {}console.log('注入preloadJS了')
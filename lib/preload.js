const xhrProxy = require('./xhr_proxy.js');const addLoading = require('./addLoading.js');const {ipcRenderer, contextBridge} = require('electron');const axios = require('axios')const moment = require("moment");const ajaxService = axios.create({    // withCredentials: true,    headers: {        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',    }});ajaxService.interceptors.request.use((config) => {    config.headers.Accept = '*/*'    config.headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'    return config;}, (error) => {    return error;});let webreportserviceInfo = nullconst updateIframeSrc = (taskid) => {    const name = window.localStorage.getItem('name')    const url = $("#bbhlist-iframe")[0].src.split('?')[0];    const params = $("#bbhlist-iframe")[0].src.split('?')[1];    let oldParams = {}    params.split('&').forEach((item) => {        const searchItem = item.split('=')        oldParams[searchItem[0]] = searchItem[1]    })    oldParams['action'] = 'qbe'    oldParams['name'] = name    oldParams['includehzh'] = 'false'    oldParams['newbbhlist'] = 'true'    oldParams['taskid'] = taskid    $("#bbhlist-iframe")[0].src = url + '?' + Object.keys(oldParams).map(item => item + '=' + oldParams[item]).join('&')}const saveData = (search, userId, postData,batchAdd) => {    const submitData = {        'service': 'edituserdata',        'taskid': search.taskid,        'btype': webreportserviceInfo.btype,        'bbq': search.bbq,        'ds': search.dataset,        'upid': search.bbhid,        'curbbh': search.bbhid,        'curbtype': search.btype,        '__t__': moment().format('x'),        'rpt': 'XXB',        'bbh': userId,        'customparams': '',    }    // 发送 POST 请求    return new Promise((resolve) => {        ajaxService({            method: 'post',            url: '/webPage/ei/webreportservice.do',            // withCredentials: true,            transformRequest: transFun,            headers: {                // 设置提交数据格式                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'            },            data: {                ...submitData,                'data': postData ? JSON.stringify([postData]) : null,            }        }).then((res) => {            ajaxService({                method: 'post',                url: '/webPage/ei/webreportservice.do',                // withCredentials: true,                transformRequest: transFun,                headers: {                    // 设置提交数据格式                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'                },                data: {                    ...submitData,                    'save': true,                    'silent': true,                }            }).then((res) => {                !batchAdd && updateIframeSrc(search.taskid)                setTimeout(() => {                    resolve()                },)            })        });    })}ipcRenderer.on('requestData', (event, args) => {    webreportserviceInfo = args})ipcRenderer.on('append', (event, args) => {    window.localStorage.setItem('name', args.username)    ipcRenderer.invoke('append', {name: args.username})})const transFun = (data = {}) => Object.entries(data).map(ent => ent.join("=")).join("&")ipcRenderer.on('post', (event, args) => {    const locationSearch = window.location.search.replace('?', '')    const search = {};    locationSearch.split('&').forEach(item => {        const dataItem = item.split('=')        search[dataItem[0]] = dataItem[1]    })    saveData(search, webreportserviceInfo.userid, args)})ipcRenderer.on('createHealth', (event, item) => {    // 添加病案    const locationSearch = window.location.search.replace('?', '')    const search = {};    locationSearch.split('&').forEach(item => {        const dataItem = item.split('=')        search[dataItem[0]] = dataItem[1]    })    const submitData = {        cmd: 'append',        username: item.patientId,        'taskid': search.taskid,        'bbq': search.bbq,        'upid': search.bbhid,        'btype': webreportserviceInfo.btype,        'dataset': search.dataset,        'curbbhid': search.bbhid,        'curbtype': search.btype,        '__t__': moment().format('x'),    }    ajaxService({        method: 'post',        url: '/webPage/ei/appendbbh.do',        // withCredentials: true,        transformRequest: transFun,        headers: {            // 设置提交数据格式            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'        },        data: submitData    }).then((res) => {        const userId = res.data.split(';')[1]        window.localStorage.setItem('name', item.patientId)        ajaxService({            method: 'post',            url: '/webPage/ei/webreportservice.do',            // withCredentials: true,            transformRequest: transFun,            headers: {                // 设置提交数据格式                'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'            },            data: {                service: 'initwebtask',                'taskid': search.taskid,                'ds': search.dataset,                'bbq': search.bbq,                bbh: userId,                'btype': webreportserviceInfo.btype,                upid: search.bbhid,                'curbbh': search.bbhid,                'curbbhtype': search.btype,                '__t__': moment().format('x'),            }        }).then(async () => {            if (userId) {                await saveData(search, userId, item.data, true)                ipcRenderer.invoke('createHealthDone')                if (item.end) {                    addLoading.removeLoading()                    ipcRenderer.invoke('batchAddDone')                } else {                    addLoading.addLoading()                }            }        })    })})try {    contextBridge.exposeInMainWorld('electronAPI', {        LoadData: (data) => ipcRenderer.invoke('LoadData', data),        createHealth: (data) => ipcRenderer.invoke('createHealth', data),        queryList: (callback) => ipcRenderer.on('queryList', callback),        createHealthDone: (callback) => ipcRenderer.on('createHealthDone', callback)    })} catch (e) {}window.addEventListener("load", function () {    // console.log("页面加载完成，重写showBbData")    xhrProxy.addHandler(function (xhr) {        if (xhr.responseURL.indexOf('https://zb.lnwsjktj.com:8080/webPage//ei/client/adddata.do') >= 0) {            const data = {};            xhr.response.split(';').forEach(item => {                const dataItem = item.split('=')                data[dataItem[0]] = dataItem[1]            })            window.localStorage.setItem('name', data.username)        }        // if (xhr.responseURL.indexOf('https://zb.lnwsjktj.com:8080/webPage//ei/client/adddata.do') >= 0) {        //     ipcRenderer.invoke('createHealthDone')        // }    });    window.showBbhData = function (bbh, bbhType, bbhName, upid) {        if (isloading) {            return;        }        //QBE对话框存在时点击报表户不响应        if (qbeDialog && qbeDialog.fdlg && qbeDialog.fdlg.dialog && qbeDialog.fdlg.dialog.isVisible()) {            return;        }        /*隐藏左侧资源树        parent.hidden();*/        //处理自动提交        // changeData(function(){loadBbhData(bbh,bbhType,bbhName,upid);},null);        // function(){        loadBbhData(bbh, bbhType, bbhName, upid);        // }        showMainMenu();    }})console.log('注入preloadJS了')